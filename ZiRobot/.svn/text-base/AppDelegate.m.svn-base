////  AppDelegate.m//  Lvpingguo////  Created by fuyonghua on 14-8-8.//  Copyright (c) 2014年 fuyonghua. All rights reserved.//#import "AppDelegate.h"#import "AppDelegate+EaseMob.h"#import "SDialog.h"#import "Base64JiaJieMi.h"#import "WeixinQunzuCellVM.h"#import "currentOreder.h"#import "LocationManager.h"#import "BlurredImage.h"#import "SSKeychain.h"#import "naoZhong.h"#import "GetAllUsers.h"#import "LaunchImageTransition.h"#import "SvUDIDTools.h"#import "WoDeGeRenZiLiaoVC.h"#import "MTA.h"#import "luanchVC.h"#import <AlipaySDK/AlipaySDK.h>#import <PgySDK/PgyManager.h>//两次提示的默认间隔static const CGFloat kDefaultPlaySoundInterval = 3.0;@implementation AppDelegate{    ///APP 是否开启    BOOL isForeground;    naoZhong *_naoZhong;}-(void)terminateWithSuccess{    }- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions{    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];    self.window.backgroundColor = [UIColor whiteColor];    [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];    _naoZhong = [[naoZhong alloc]init];            //腾讯分析    [MTA startWithAppkey:@"IG14PKZA2K8Y"];        //蒲公英    [[PgyManager sharedPgyManager] startManagerWithAppId:@"17582eeb1d71adfe90368a8561957eaf"];    [[PgyManager sharedPgyManager] setEnableFeedback:NO];        UILocalNotification *localNotif = [launchOptions objectForKey:UIApplicationLaunchOptionsLocalNotificationKey];    if (localNotif)    {        NSDictionary* infoDic = localNotif.userInfo;        NSString* codeStr = [infoDic objectForKey:@"clock"];        if(codeStr!= nil && codeStr.length>0)        {            [_naoZhong playWithNotification:localNotif UIApplication:application];        }    }            UDID = [SvUDIDTools UDID];    NSLog(@"udid in keychain %@", UDID);        //    [[LocationManager sharedLocationManager] startUpdateLocation];        _connectionState = eEMConnectionConnected;        [self easemobApplication:application didFinishLaunchingWithOptions:launchOptions];        //讯飞    [self xunfeiFangfa];        //百度地图    [self baiduDituShouquan];            NSLog(@"==============%d",[NetWork getNetworkTypeFromStatusBar]);        [[NSNotificationCenter defaultCenter] addObserver:self                                             selector:@selector(loginStateChange:)                                                 name:KNOTIFICATION_LOGINCHANGE                                               object:nil];            if ([UIDevice currentDevice].systemVersion.floatValue >= 7.0) {        [[UINavigationBar appearance] setBackgroundImage:[UIImage imageNamed:@"背景.png"] forBarMetrics:UIBarMetricsDefault];        [[UINavigationBar appearance] setTintColor:[UIColor whiteColor]];        [[UINavigationBar appearance] setTitleTextAttributes:         [NSDictionary dictionaryWithObjectsAndKeys:RGBACOLOR(245, 245, 245, 1), NSForegroundColorAttributeName, [UIFont fontWithName:@ "Helvetica Neue" size:18.0], NSFontAttributeName, nil]];    }            [[NSNotificationCenter defaultCenter] postNotificationName:KNOTIFICATION_LOGINCHANGE object:@YES];        [self.window makeKeyAndVisible];        return YES;}- (void)baiduDituShouquan{    _mapManager=[[BMKMapManager alloc]init];    BOOL re=[_mapManager start:MAPKIT generalDelegate:self];    if (!re) {        NSLog(@"打开地图失败");    }else{        NSLog(@"打开百度地图成功");    }}- (void)xunfeiFangfa{    //设置log等级，此处log为默认在app沙盒目录下的msc.log文件    [IFlySetting setLogFile:LVL_ALL];        //输出在console的log开关    [IFlySetting showLogcat:YES];        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);    NSString *cachePath = [paths objectAtIndex:0];    //设置msc.log的保存路径    [IFlySetting setLogFilePath:cachePath];        //创建语音配置,appid必须要传入，仅执行一次则可    NSString *initString = [[NSString alloc] initWithFormat:@"appid=%@,timeout=%@",APPID_VALUE,TIMEOUT_VALUE];        //所有服务启动前，需要确保执行createUtility    [IFlySpeechUtility createUtility:initString];        [IFlyFlowerCollector SetDebugMode:YES];    [IFlyFlowerCollector SetCaptureUncaughtException:YES];    [IFlyFlowerCollector SetAppid:APPID_VALUE];    [IFlyFlowerCollector SetAutoLocation:YES];}- (NSUInteger)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window{    return UIInterfaceOrientationMaskPortrait;}- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation{        if ([url.host isEqualToString:@"safepay"]){     //支付宝钱包快登授权返回 authCode        [[AlipaySDK defaultService] processAuthResult:url standbyCallback:^(NSDictionary *resultDic) {            NSLog(@"result = %@",resultDic);            int state = [[resultDic objectForKey:@"resultStatus"]intValue];            NSString *memo = [resultDic objectForKey:@"memo"];            switch (state) {                case AliPaySuccess:                    break;                case AliPayIsDealing:                    [SDialog showTipViewWithText:memo hideAfterSeconds:1];                    break;                case AliPayFaild:                    [SDialog showTipViewWithText:memo hideAfterSeconds:1];                    break;                case AliPayCancel:                    [SDialog showTipViewWithText:memo hideAfterSeconds:1];                    break;                case AliPayNetDisconected:                    [SDialog showTipViewWithText:memo hideAfterSeconds:1];                    break;                                    default:                    break;            }        }];    }    return  [UMSocialSnsService handleOpenURL:url wxApiDelegate:nil];    return YES;}- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {    //#warning SDK方法调用    [[EaseMob sharedInstance] application:application didFailToRegisterForRemoteNotificationsWithError:error];    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"注册推送失败"                                                    message:error.description                                                   delegate:nil                                          cancelButtonTitle:@"确定"                                          otherButtonTitles:nil];    [alert show];}- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification{    NSDictionary *dict = notification.userInfo;    NSString *str = [dict objectForKey:@"clock"];    if(str == nil || str.length == 0){        //#warning SDK方法调用        [[EaseMob sharedInstance] application:application didReceiveLocalNotification:notification];                if (self.chatView) {            //            [self dengluHuanXin];        }    }    else {        [_naoZhong playWithNotification:notification UIApplication:application];    }}- (void)applicationWillResignActive:(UIApplication *)application{    //#warning SDK方法调用    [[EaseMob sharedInstance] applicationWillResignActive:application];    //[BMKMapView  willBackGround];}- (void)applicationDidEnterBackground:(UIApplication *)application{    isForeground = NO;     [[NSNotificationCenter defaultCenter] postNotificationName:@"applicationDidEnterBackground" object:nil];    [[NSNotificationCenter defaultCenter] postNotificationName:@"luYinStop" object:nil];    //#warning SDK方法调用    [[EaseMob sharedInstance] applicationDidEnterBackground:application];        UIApplication*   app = [UIApplication sharedApplication];        __block    UIBackgroundTaskIdentifier bgTask;        bgTask = [app beginBackgroundTaskWithExpirationHandler:^{        dispatch_async(dispatch_get_main_queue(), ^{            if (bgTask != UIBackgroundTaskInvalid)            {                bgTask = UIBackgroundTaskInvalid;            }        });    }];    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{        dispatch_async(dispatch_get_main_queue(), ^{            if (bgTask != UIBackgroundTaskInvalid)            {                bgTask = UIBackgroundTaskInvalid;            }        });    });        /////flajfljskdf}- (void)applicationWillEnterForeground:(UIApplication *)application{    //#warning SDK方法调用    [[EaseMob sharedInstance] applicationWillEnterForeground:application];        [application setApplicationIconBadgeNumber:0];    }- (void)applicationDidBecomeActive:(UIApplication *)application{    isForeground = YES;        [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];        NSUserDefaults *def = [NSUserDefaults standardUserDefaults];    NSString *str = [def objectForKey:@"termin"];    if ([str isEqualToString:@"1"]) {        [[NSNotificationCenter defaultCenter] postNotificationName:KNOTIFICATION_LOGINCHANGE object:@YES];    }        //#warning SDK方法调用    [[EaseMob sharedInstance] applicationDidBecomeActive:application];    }- (void)applicationWillTerminate:(UIApplication *)application{        //#warning SDK方法调用        [[EaseMob sharedInstance] applicationWillTerminate:application];}- (void)group:(EMGroup *)group didLeave:(EMGroupLeaveReason)reason error:(EMError *)error{        NSString *tmpStr = group.groupSubject;        NSString *str;        if (!tmpStr || tmpStr.length == 0) {                NSMutableArray *temp = [NSMutableArray array];                [temp addObjectsFromArray:[[EaseMob sharedInstance].chatManager loadAllMyGroupsFromDatabaseWithAppend2Chat:YES]];                if ([NetWork isConnectionAvailable]) {                        NSArray *groupArray = [[EaseMob sharedInstance].chatManager groupList];                        [temp addObjectsFromArray:groupArray];                        for (EMGroup *obj in temp) {                                if ([obj.groupId isEqualToString:group.groupId]) {                                        tmpStr = obj.groupSubject;                                        break;                }            }        }    }        if (reason == eGroupLeaveReason_BeRemoved) {        str = [NSString stringWithFormat:@"你被从群组\'%@\'中踢出", tmpStr];    }    if (str.length > 0) {        //        [LDialog showMessage:str];        [SDialog showTipViewWithText:str hideAfterSeconds:1.0f];    }}- (void)didBindDeviceWithError:(EMError *)error{    if (error) {        [LDialog showMessage:@"消息推送与设备绑定失败" ok:^{                    }];    }}#pragma mark - private-(void)loginStateChange:(NSNotification *)notification{        BOOL isAutoLogin = [[[EaseMob sharedInstance] chatManager] isAutoLoginEnabled];    BOOL loginSuccess = [notification.object boolValue];        if (isAutoLogin || loginSuccess) {        [AppContext createNavigationControllerWithInterfaceDirection:@"bottom,up,left,right"];        UINavigationController* rootController = (UINavigationController*)[AppContext rootController];                [rootController setNavigationBarHidden:YES];        [AppContext initWithAppDelegate:self];                luanchVC *luanch = [[luanchVC alloc] init];                [AppContext pushController:luanch];            }}- (void)loginWithUsername:(NSString *)username password:(NSString *)password{    NSLog(@"当前登录用户名:%@ 手机号码(密码):%@",username,password);        [[EaseMob sharedInstance].chatManager asyncLoginWithUsername:username                                                        password:password                                                      completion:     ^(NSDictionary *loginInfo, EMError *error) {                  //         [self hideHud];                  if (loginInfo && !error) {                          NSLog(@"loginInfo =%@",loginInfo);                          //[self getHuanxinSuperUserToken];                          EMError *error = [[EaseMob sharedInstance].chatManager importDataToNewDatabase];                          EMError *er1 = [[EaseMob sharedInstance].chatManager loadDataFromDatabase];                          if (error) {                 NSLog(@"新到旧信息:%@",error);             }                          if (!er1) {                                  NSLog(@"从新导入信息:%@",er1);             }                      }else{                          NSLog(@"环信emrror:%lu",(unsigned long)error.errorCode);                          NSLog(@"环信emrror.description:%@",error.description);                      }         //获取未读消息数，此时并没有把self注册为SDK的delegate，读取出的未读数是上次退出程序时的         //         [self didUnreadMessagesCountChanged];         //#warning 把self注册为SDK的delegate         //         [self unregisterNotifications];         //环信         [[EaseMob sharedInstance].chatManager addDelegate:self delegateQueue:nil];                  [[EaseMob sharedInstance].chatManager asyncFetchMyGroupsList];              } onQueue:nil];}- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo{    if (self.chatView) {        //        [self dengluHuanXin];    }}#pragma mark - private-(void)registerNotifications{        [[EaseMob sharedInstance].chatManager addDelegate:self delegateQueue:nil];    [self unregisterNotifications];    //    [[EMSDKFull sharedInstance].callManager addDelegate:self delegateQueue:nil];}-(void)unregisterNotifications{    [[EaseMob sharedInstance].chatManager removeDelegate:self];    //    [[EMSDKFull sharedInstance].callManager removeDelegate:self];}- (BOOL)needShowNotification:(NSString *)fromChatter{    BOOL ret = YES;    NSArray *igGroupIds = [[EaseMob sharedInstance].chatManager ignoredGroupIds];    for (NSString *str in igGroupIds) {        if ([str isEqualToString:fromChatter]) {            ret = NO;            break;        }    }        return ret;}// 收到消息回调-(void)didReceiveMessage:(EMMessage *)message{    needShowNotification = message.isGroup ? [self needShowNotification:message.conversationChatter] : YES;    if (needShowNotification) {#if !TARGET_IPHONE_SIMULATOR                BOOL isAppActivity = [[UIApplication sharedApplication] applicationState] == UIApplicationStateActive;                if (!isAppActivity) {            [self showNotificationWithMessage:message];        }else {            [self playSoundAndVibration];        }#endif    }}-(void)didReceiveCmdMessage:(EMMessage *)message{    //[self showHint:NSLocalizedString(@"receiveCmd", @"receive cmd message")];}- (void)playSoundAndVibration{    NSTimeInterval timeInterval = [[NSDate date]                                   timeIntervalSinceDate:self.lastPlaySoundDate];    if (timeInterval < kDefaultPlaySoundInterval) {        //如果距离上次响铃和震动时间太短, 则跳过响铃        NSLog(@"skip ringing & vibration %@, %@", [NSDate date], self.lastPlaySoundDate);        return;    }        //保存最后一次响铃时间    self.lastPlaySoundDate = [NSDate date];        // 收到消息时，播放音频    [[EaseMob sharedInstance].deviceManager asyncPlayNewMessageSound];    // 收到消息时，震动    [[EaseMob sharedInstance].deviceManager asyncPlayVibration];}- (void)showNotificationWithMessage:(EMMessage *)message{    EMPushNotificationOptions *options = [[EaseMob sharedInstance].chatManager pushNotificationOptions];        options.displayStyle = ePushNotificationDisplayStyle_messageSummary;        //发送本地推送    UILocalNotification *notification = [[UILocalNotification alloc] init];    notification.fireDate = [NSDate date]; //触发通知的时间        if (options.displayStyle == ePushNotificationDisplayStyle_messageSummary) {        id<IEMMessageBody> messageBody = [message.messageBodies firstObject];        NSString *messageStr = nil;        NSData *data = [((EMTextMessageBody *)messageBody).text dataUsingEncoding:NSUTF8StringEncoding];                NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:nil];                switch (messageBody.messageBodyType) {            case eMessageBodyType_Text:            {                int type = [[dict objectForKey:@"type"]intValue];                if (type == 43) {                    messageStr = @"天气预报";                }else if (type == 42){                    messageStr = @"电影";                }else if (type == 41){                    messageStr = @"音乐";                }else if (type == 40){                    messageStr = @"挂号";                }else if (type == 31){                    messageStr = @"飞机票";                }else if (type == 10){                    messageStr = @"维修";                }else if (type == 66){                    messageStr = @"地图";                }else if (type == 0){                    messageStr = [dict objectForKey:@"msg"];                }else if (type == 20){                    messageStr = @"商品";                }else if (type == 25){                    messageStr = @"餐饮";;                }else if (type == 30){                    messageStr = @"机票";                }else if (type == 35){                    messageStr = @"酒店";                }else if (type == 50){                    messageStr = @"支付";                }else if (type == 70){                    messageStr = @"提醒";                }else if (type == 999){                    messageStr = @"其他";                }else{                    messageStr = @"为您选好了几个商品，快回来选择啊~";                }            }                break;            case eMessageBodyType_Image:            {                messageStr = NSLocalizedString(@"message.image", @"Image");            }                break;            case eMessageBodyType_Location:            {                messageStr = NSLocalizedString(@"message.location", @"Location");            }                break;            case eMessageBodyType_Voice:            {                messageStr = NSLocalizedString(@"message.voice", @"Voice");            }                break;            case eMessageBodyType_Video:{                messageStr = NSLocalizedString(@"message.vidio", @"Vidio");            }                break;            default:                break;        }                NSString *title = Title;        notification.alertBody = [NSString stringWithFormat:@"%@:%@", title, messageStr];        //[self unregisterNotifications];    }    else{        notification.alertBody = NSLocalizedString(@"receiveMessage", @"you have a new message");    }    #warning 去掉注释会显示[本地]开头, 方便在开发中区分是否为本地推送    //notification.alertBody = [[NSString alloc] initWithFormat:@"[本地]%@", notification.alertBody];        notification.alertAction = NSLocalizedString(@"open", @"Open");    notification.timeZone = [NSTimeZone defaultTimeZone];    notification.soundName = UILocalNotificationDefaultSoundName;        //发送通知    [[UIApplication sharedApplication] scheduleLocalNotification:notification];    UIApplication *application = [UIApplication sharedApplication];    application.applicationIconBadgeNumber += 1;        //取消通知    //[[UIApplication sharedApplication] cancelLocalNotification:notification];}#pragma mark 分享授权- (void)fenxiangShouquan:(NSString *)url{    NSLog(@"----%@",url);    [UMSocialData openLog:YES];    [UMSocialData setAppKey:UM_AppKey];    [UMSocialWechatHandler setWXAppId:Weixin_Appid appSecret:Weixin_AppSecret url:url];    [UMSocialQQHandler setQQWithAppId:QQ_Appid appKey:QQ_AppSecret url:url];    [UMSocialQQHandler setSupportWebView:NO];}- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url{    return  [UMSocialSnsService handleOpenURL:url];}@end